nike-ChatVRM/
  tailwind.config.js
  LICENSE
  output_sorted.json
  marp.pdf
  Dockerfile
  marp.md
  next.config.js
  electron.mjs
  input_sorted.json
  test.py
  README.md
  .gitignore
  package-lock.json
  package.json
  .env
  watch.json
  tsconfig.json
  docker-compose.yml
  postcss.config.js
  .eslintrc.json
  locales/
    ja/
      translation.json
    zh/
      translation.json
    ko/
      translation.json
    en/
      translation.json
  docs/
    vrm_licence_en.md
    vrm_licence_zh.md
    logo_licence_ko.md
    README_ko.md
    logo_licence_zh.md
    logo_licence_en.md
    README_en.md
    README_zh.md
    logo_licence.md
    vrm_licence.md
    vrm_licence_ko.md
  .next/
  public/
    ogp.png
    bg-c.png
    github-mark-white.svg
    AvatarSample_B.vrm
    AvatarSample_B_old.vrm
    idle_loop.vrma
  .github/
    workflows/
      nextjs.yml
  .git/
  src/
    features/
      emoteController/
        expressionController.ts
        emoteConstants.ts
        autoLookAt.ts
        autoBlink.ts
        emoteController.ts
      lipSync/
        lipSyncAnalyzeResult.ts
        lipSync.ts
      messages/
        speakCharacter.ts
        messages.ts
        synthesizeStyleBertVITS2.ts
        synthesizeVoiceGoogle.ts
        synthesizeVoice.ts
      chat/
        localLLMChat.ts
        anthropicChat.ts
        openAiChat.ts
        googleChat.ts
        groqChat.ts
        difyChat.ts
        aiChatFactory.ts
      constants/
        systemPromptConstants.ts
        koeiroParam.ts
      vrmViewer/
        viewerContext.ts
        model.ts
        viewer.ts
      youtube/
        conversationContinuityFunctions.ts
        youtubeComments.ts
      googletts/
        googletts.ts
      koeiromap/
        koeiromap.ts
    utils/
      reduceTalkStyle.ts
      englishToJapanese.json
      wait.ts
      buildUrl.ts
    styles/
      globals.css
    components/
      settings.tsx
      chatLog.tsx
      messageInput.tsx
      link.tsx
      speakers.json
      meta.tsx
      textButton.tsx
      assistantText.tsx
      codeLog.tsx
      menu.tsx
      messageInputContainer.tsx
      iconButton.tsx
      githubLink.tsx
      introduction.tsx
      vrmViewer.tsx
    lib/
      i18n.js
      VRMAnimation/
        VRMAnimation.ts
        VRMAnimationLoaderPluginOptions.ts
        VRMAnimationLoaderPlugin.ts
        loadVRMAnimation.ts
        VRMCVRMAnimation.ts
        utils/
          linearstep.ts
          saturate.ts
          arrayChunk.ts
      VRMLookAtSmootherLoaderPlugin/
        VRMLookAtSmoother.ts
        VRMLookAtSmootherLoaderPlugin.ts
    pages/
      index.tsx
      _document.tsx
      _app.tsx
      api/
        anthropic.ts
        chat.ts
        groq.ts
        google.ts
        tts.ts
        stylebertvits2.ts


/Users/user/WorkSpace/nike-ChatVRM/tailwind.config.js:
1. ファイルの全体的な説明:
このファイルは、Tailwind CSSのカスタム設定ファイルです。Tailwind CSSは、ユーティリティファーストのCSSフレームワークで、このファイルではカスタムテーマ、カラーパレット、フォントファミリーなどの設定が行われています。

2. インポートされているモジュール:
- `@charcoal-ui/theme`
- `@charcoal-ui/tailwind-config`

3. 関数の説明:
このファイルには関数は定義されていません。代わりに、Tailwind CSSの設定オブジェクトがエクスポートされています。

/Users/user/WorkSpace/nike-ChatVRM/LICENSE:
1. ファイルの全体的な説明:
このファイルには、MITライセンスのテキストが含まれています。MITライセンスは、オープンソースソフトウェアの使用と配布に関する条件を定めた、非常に寛容なライセンスです。

2. インポートされているモジュール:
このファイルにはコードがなく、モジュールのインポートはありません。

3. 関数の説明:
このファイルには関数が定義されていません。

/Users/user/WorkSpace/nike-ChatVRM/Dockerfile:
1. ファイルの全体的な説明:
このファイルはDockerfileであり、Node.jsアプリケーションをDockerコンテナ内で実行するための設定を含んでいます。

2. インポートされているモジュール:
このDockerfileではモジュールがインポートされていません。

3. 関数の説明:
このDockerfileには関数が定義されていません。代わりに、以下のステップが記述されています。

- `FROM node:16`: Node.js 16をベースイメージとして使用します。
- `WORKDIR /app`: 作業ディレクトリを `/app` に設定します。
- `COPY package*.json ./`: `package.json` と `package-lock.json` をコピーします。
- `RUN npm ci`: 依存関係をインストールします。
- `COPY . .`: アプリケーションのソースコードをコピーします。
- `RUN npm run build`: アプリケーションをビルドします。
- `EXPOSE 3000`: コンテナの3000番ポートを公開します。
- `CMD ["npm", "start"]`: `npm start` コマンドでアプリケーションを起動します。

/Users/user/WorkSpace/nike-ChatVRM/next.config.js:
このファイルは、Next.jsアプリケーションの設定を定義しているファイル(`next.config.js`)のようです。

1. ファイルの全体的な説明:
このファイルは、Next.jsアプリケーションの設定を定義しています。Next.jsは、React製のフレームワークで、サーバーサイドレンダリング(SSR)をサポートしています。この設定ファイルでは、アプリケーションの様々な動作を制御する設定項目が定義されています。

2. インポートされているモジュール:
このファイルでは、モジュールのインポートは行われていません。

3. 関数の説明:
このファイルには関数は定義されていません。代わりに、`nextConfig`という定数オブジェクトが定義されており、その中に設定項目が含まれています。各設定項目の説明は以下の通りです。

- `reactStrictMode`: Reactの厳格モードを有効にするかどうかを指定します。
- `assetPrefix`: アセット(画像、スタイルシートなど)のURLプレフィックスを設定します。
- `basePath`: アプリケーションのベースパスを設定します。
- `trailingSlash`: URLの末尾にスラッシュを付けるかどうかを設定します。
- `publicRuntimeConfig`: クライアントサイドで利用可能な設定を定義します。この設定では、`root`キーが定義されています。
- `optimizeFonts`: フォントの最適化を行うかどうかを設定します。

この設定ファイルは、Next.jsアプリケーションのビルドやデプロイの際に使用されます。

/Users/user/WorkSpace/nike-ChatVRM/electron.mjs:
1. ファイルの全体的な説明:
このファイルは、Electronアプリケーションのメインプロセスを構成するコードです。Electronアプリケーションの初期設定と、メインウィンドウの作成および設定を行っています。

2. インポートされているモジュール:
- electron: Electronアプリケーションの主要なモジュール
- path: Node.jsのパスユーティリティモジュール
- url: Node.jsのURLユーティリティモジュール
- electron-is-dev: 開発モードかどうかを判別するモジュール
- wait-on: 指定されたリソースが利用可能になるまで待機するモジュール

3. 関数の説明:
createWindow(): メインウィンドウを作成し、設定を行う関数です。開発モードと本番モードで異なる挙動をする。

/Users/user/WorkSpace/nike-ChatVRM/test.py:
1. ファイルの全体的な説明:
このPythonスクリプトは、JSONファイルのキーを長さでソートし、ソートされた結果を新しいJSONファイルに書き込みます。

2. インポートされているモジュール:
- json: JSONデータを扱うための標準モジュール
- collections: OrderedDictクラスを提供するコレクションモジュール

3. 関数の説明:
sort_json_keys_by_length(input_file, output_file):
  入力JSONファイルを読み込み、キーを長さでソートし、ソートされた結果を新しいJSONファイルに書き込む関数。

/Users/user/WorkSpace/nike-ChatVRM/README.md:
このファイルは、AITuberキットのリポジトリのREADME.mdファイルのようです。このプロジェクトには、以下の3つの主要な機能があります。

1. AIキャラとの対話
2. AITuber配信
3. 外部連携モード

また、このプロジェクトは主にJavaScriptで記述されており、モジュールのインポートは含まれていません。

関数についても説明はありませんが、各機能の使用方法が詳細に記載されています。

/Users/user/WorkSpace/nike-ChatVRM/.gitignore:
このファイルは、.gitignoreファイルのようです。.gitignoreファイルは、Gitバージョン管理システムで無視するファイルやディレクトリを指定するためのファイルです。

1. ファイルの全体的な説明:
このファイルには、Node.jsアプリケーションの開発時に生成される一時ファイルやディレクトリ、ローカル環境設定ファイル、デバッグログなどが無視されるよう指定されています。

2. インポートされているモジュール:
このファイルはGitの設定ファイルなので、特にモジュールをインポートしていません。

3. 関数の説明:
このファイルには関数は含まれていません。

/Users/user/WorkSpace/nike-ChatVRM/package.json:
1. ファイルの全体的な説明:
このファイルは、Next.js アプリケーションの package.json ファイルです。アプリケーションの名前、バージョン、依存関係、スクリプトなどの情報が含まれています。

2. インポートされているモジュール:
このファイルは package.json ファイルなので、モジュールのインポートは行われていません。しかし、以下のモジュールが依存関係として記載されています:

- @anthropic-ai/sdk
- @charcoal-ui/icons
- @google-cloud/text-to-speech
- @google/generative-ai
- @tailwindcss/line-clamp
- @types/dom-speech-recognition
- axios
- eslint
- eslint-config-next
- groq-sdk
- i18next
- next
- node-fetch
- openai
- react
- react-dom
- react-i18next
- three
- typescript

3. 関数の説明:
package.json ファイルには関数は含まれていません。代わりに、以下のスクリプトが定義されています:

- dev: Next.js の開発サーバーを起動します。
- build: Next.js アプリケーションのビルドを行います。
- start: Next.js アプリケーションのビルドとサーバー起動を行います。
- export: Next.js アプリケーションをスタティックファイルとしてエクスポートします。
- lint: コードの lint チェックを行います。
- electron: Electron アプリケーションを起動します。
- desktop: 開発サーバーと Electron アプリケーションを同時に起動します。

/Users/user/WorkSpace/nike-ChatVRM/.env:
このファイルは環境変数を設定するためのものです。具体的には、Googleの認証情報、OpenAI、Anthropic、Google、Groq、DifyのAPIキーなどを設定しています。関数はありません。

1. ファイルの全体的な説明:
このファイルには、様々なサービスのAPIキーや認証情報を設定するための環境変数が含まれています。これらの変数は、アプリケーションの動作に必要な認証や機能を提供するために使用されます。

2. インポートされているモジュール:
なし

3. 関数の説明:
関数はありません。

/Users/user/WorkSpace/nike-ChatVRM/watch.json:
1. ファイルの全体的な説明:
提示されたファイルの内容は、Next.jsアプリケーションの開発サーバーの設定を含むJSONファイルのようです。このファイルは、ホットリロードの動作を制御するために使用されます。

2. インポートされているモジュール:
このファイルには、インポートされているモジュールはありません。

3. 関数の説明:
このファイルには関数は含まれていません。代わりに、以下のような設定オプションが含まれています:

- "install": Next.jsアプリケーションの初期インストール時に監視対象となるファイルを指定しています。この例では、"package.json"ファイルが含まれています。

- "restart": アプリケーションの再起動時に監視対象となるファイルを指定しています。この例では、".env"ファイルと"next.config.js"ファイルが含まれています。

- "throttle": ホットリロードのデバウンス時間をミリ秒単位で指定しています。この例では、250ミリ秒に設定されています。

/Users/user/WorkSpace/nike-ChatVRM/tsconfig.json:
1. ファイルの全体的な説明:
このファイルは、TypeScriptプロジェクトの構成設定ファイル(tsconfig.json)です。TypeScriptコンパイラのオプションを設定し、プロジェクトのソースファイルとコンパイル対象を指定しています。

2. インポートされているモジュール:
このファイルではモジュールがインポートされていません。

3. 関数の説明:
このファイルには関数が含まれていません。代わりに、以下のコンパイラオプションが設定されています:

- target: 出力されるJavaScriptのバージョンを指定(ES2015)
- lib: 型定義ファイルを含めるライブラリを指定(DOM, ES次期バージョン)
- allowJs: JavaScriptファイルをコンパイルの対象に含める
- skipLibCheck: すべての型定義ファイルのインポートを無視する
- strict: 厳格な型チェックモードを有効にする
- forceConsistentCasingInFileNames: ファイル名の大文字小文字を一致させる  
- noEmit: コード出力を行わない(型チェックのみ)
- esModuleInterop: ES6モジュール構文をインポート時に注意事項なしで扱える
- module: 出力するモジュールコードの形式を指定(ES次期バージョン)
- moduleResolution: モジュール解決方式を指定(Node.jsスタイル)
- resolveJsonModule: JSON形式のファイルをモジュールとしてインポートできる
- isolatedModules: モジュールを個々に扱う
- jsx: JSXの出力方式を指定(React要素をそのまま出力)
- incremental: 増分コンパイルを有効にする
- paths: ソースコード内のモジュールパスを解決するための設定

また、includeとexcludeでコンパイル対象とそうでないファイルを指定しています。

/Users/user/WorkSpace/nike-ChatVRM/docker-compose.yml:
1. ファイルの全体的な説明:
このファイルはDocker Composeの設定ファイル(docker-compose.yml)です。Docker Composeを使用して複数のコンテナを定義し、管理するための設定が記述されています。

2. インポートされているモジュール:
このファイルはYAMLフォーマットなので、モジュールのインポートはありません。

3. 関数の説明:
このファイルには関数が定義されていません。代わりに、以下のサービスが定義されています。

- app:
  - ビルドコンテキストは現在のディレクトリ(.)に設定されています。
  - ホストの3000番ポートをコンテナの3000番ポートにマップしています。
  - ホストの現在のディレクトリ(.)をコンテナの/appにマウントしています。
  - .env ファイルから環境変数を読み込んでいます。

/Users/user/WorkSpace/nike-ChatVRM/postcss.config.js:
1. ファイルの全体的な説明:
このファイルは、Next.jsアプリケーションで使用される PostCSS の設定ファイルです。PostCSS は CSS ファイルを変換するためのツールで、プラグインを使って様々な機能を追加できます。

2. インポートされているモジュール:
このファイルではモジュールがインポートされていません。

3. 関数の説明:
このファイルには関数が定義されていません。代わりに、`plugins` オブジェクトが `module.exports` に割り当てられており、利用するプラグインが列挙されています。

- `tailwindcss`: Tailwind CSS は、ユーティリティファーストの CSS フレームワークで、要素にスタイルを適用するための便利なクラスを提供します。
- `autoprefixer`: Autoprefixer は、ベンダープレフィックス (vendor prefixes) を自動的に CSS に付加するプラグインです。これにより、古いブラウザでも CSS を適切にレンダリングできるようになります。

/Users/user/WorkSpace/nike-ChatVRM/.eslintrc.json:
このファイルには、ほとんど内容がありません。単に、Next.jsアプリケーションのESlintの設定を拡張するための1行の構成しか含まれていません。

1. ファイルの全体的な説明:
このファイルは、Next.jsアプリケーションのESLint設定を拡張するための単一行の構成ファイルです。`"extends": "next/core-web-vitals"`という行は、Next.jsの基本的な推奨設定に加えて、Core Web Vitalsの推奨設定を含めることを指定しています。

2. インポートされているモジュール:
このファイルではモジュールをインポートしていません。

3. 関数の説明:
このファイルには関数が定義されていません。

このファイルの目的は、ESLintの設定を簡単に拡張することです。Core Web Vitalsは、ウェブページのパフォーマンスを測定する重要な指標であり、その推奨設定に従うことで、ウェブアプリケーションのパフォーマンスとユーザーエクスペリエンスを改善できます。

/Users/user/WorkSpace/nike-ChatVRM/locales/zh/translation.json:
このファイルは、JSON形式のデータです。テキストデータが含まれていますが、関数やモジュールのインポートは含まれていません。そのため、2と3の項目については該当するものがありません。

1. ファイルの全体的な説明:
このJSONファイルには、アプリケーションの設定項目に関する多言語のテキストデータが含まれています。設定項目には、外部接続モード、YouTube関連設定、会話の継続モード、APIキー、モデル選択、音声エンジン選択、言語選択、スタイル設定など、様々なものが含まれています。また、アプリケーションの概要説明や技術的な説明なども含まれています。

/Users/user/WorkSpace/nike-ChatVRM/locales/ko/translation.json:
1. ファイルの全体的な説明:
このファイルは、アプリケーションの設定画面で使用されるテキストのリソースファイルのようです。多言語対応されており、設定項目のラベル、説明、ヘルプなどが含まれています。

2. インポートされているモジュール:
データはJSON形式で記述されているため、モジュールはインポートされていません。

3. 関数の説明:
ファイルにはコードが含まれていないため、関数の説明はありません。代わりに、以下のような設定項目のテキストリソースが含まれています。

- "Settings": 設定
- "ExternalConnectionMode": 外部接続モード(WebSocket)
- "YoutubeMode": YouTube モード
- "YoutubeInfo": YouTubeのチャットをAIにフィードする際の説明
- "YoutubeAPIKey": YouTube API キー
- "YoutubeLiveID": YouTube Live ID
- "ConversationContinuityMode": 対話の継続モード(ベータ版)の説明
- "StatusOn"/"StatusOff": ONまたはOFFの状態表示
- 各種APIキーの説明とフォームのラベル
- キャラクター設定に関する説明
- 音声合成エンジンの選択とそれぞれの説明
- その他、アプリの説明、技術紹介、リポジトリURLなど

/Users/user/WorkSpace/nike-ChatVRM/locales/en/translation.json:
このファイルは、JSONフォーマットのデータを含んでいます。JSONデータは、キーと値のペアで構成されています。このファイルには、アプリケーションの設定やメッセージ文字列が含まれています。プログラミング言語のコードは含まれていないため、インポートされているモジュールや関数はありません。

1. ファイルの全体的な説明:
このファイルには、Webアプリケーションの様々な設定とメッセージ文字列が含まれています。設定には、外部接続モード、YouTube設定、会話の継続モードなどがあります。また、AIサービスの選択、APIキー、キャラクターモデル、音声合成エンジンの選択などの設定も含まれています。さらに、アプリケーションの説明や技術情報に関するメッセージ文字列も含まれています。

2. インポートされているモジュール:
該当なし (JSONデータなので、モジュールのインポートはありません)

3. 関数の説明:
該当なし (JSONデータなので、関数は定義されていません)

/Users/user/WorkSpace/nike-ChatVRM/docs/vrm_licence_en.md:
1. ファイルの全体的な説明:
このファイルは、aituber-kitリポジトリに提供されているVRMモデルの利用規約を定めています。著作権、許可される利用、禁止される利用、免責事項、規約の変更などについて説明しています。

2. インポートされているモジュール:
このファイルはPythonやTypeScriptのコードではなく、プレーンテキストのドキュメントです。そのため、インポートされているモジュールはありません。

3. 関数の説明:
このファイルには関数は定義されていません。

/Users/user/WorkSpace/nike-ChatVRM/docs/vrm_licence_zh.md:
ファイルの内容は、「aituber-kit」リポジトリで提供されている特定のVRMモデルの使用許諾条件を説明するドキュメントのようです。ここでは、関数やインポートされたモジュールはありません。

1. ファイルの全体的な説明:
このファイルは、GitHub の「aituber-kit」リポジトリで提供されている VRM モデル「AvatarSample_B.vrm」の使用許諾条件について説明しています。使用目的、許可される使用方法、禁止される使用方法、免責事項、条件の変更方法などが記載されています。

2. インポートされているモジュール:
なし

3. 関数の説明: 
なし

/Users/user/WorkSpace/nike-ChatVRM/docs/logo_licence_ko.md:
1. ファイルの全体的な説明:
このファイルは、aituber-kit リポジトリで使用されているロゴの使用許諾条件を定義しています。著作権、許可される使用方法、禁止される使用方法、免責事項、規約の変更、連絡先などについて説明しています。

2. インポートされているモジュール:
このファイルはPythonやTypeScriptのコードではなく、単なるテキストファイルのようなので、インポートされているモジュールはありません。

3. 関数の説明:
このファイルには関数が定義されていないため、関数の説明はありません。

/Users/user/WorkSpace/nike-ChatVRM/docs/README_ko.md:
申し訳ありませんが、提供されたファイルの内容はHTMLとMarkdownで書かれており、PythonやTypeScriptのコードではありません。したがって、インポートされているモジュールや関数の説明はありません。代わりに、以下のようにファイルの内容を説明します。

1. ファイルの全体的な説明:
このファイルには、「AITuber Kit」と呼ばれるプロジェクトの概要と使用方法が記載されています。主に3つの機能があります。1) AI キャラクターとの対話、2) YouTube ライブストリーミングでの対話、3) 外部アプリケーションとの統合。各機能の詳細な説明と手順が含まれています。

2. インポートされているモジュール:
該当なし

3. 関数の説明:
該当なし

このファイルには、プロジェクトの紹介、設定方法、使用方法などの情報が含まれています。さらに、開発者への支援の呼びかけやライセンス情報も記載されています。

/Users/user/WorkSpace/nike-ChatVRM/docs/logo_licence_zh.md:
1. ファイルの全体的な説明:
このファイルは、aituber-kitリポジトリで使用される商標の使用条件を規定しています。商標の版権所有者、商標の許可される使用方法と禁止される使用方法、免責事項、使用条件の変更、および問い合わせ先が記載されています。

2. インポートされているモジュール:
なし(このファイルはPythonやTypeScriptのコードではありません)

3. 関数の説明:
なし(このファイルには関数が含まれていません)

/Users/user/WorkSpace/nike-ChatVRM/docs/logo_licence_en.md:
1. ファイルの全体的な説明:
このファイルは、aituber-kitリポジトリで使用されているロゴの利用規約を説明しています。著作権の所有者、許可される利用方法、禁止される利用方法、免責事項、規約の変更、連絡先などが記載されています。

2. インポートされているモジュール:
なし(このファイルはPythonやTypeScriptのコードではなく、テキストファイルです)

3. 関数の説明:
なし(このファイルには関数が定義されていません)

/Users/user/WorkSpace/nike-ChatVRM/public/github-mark-white.svg:
このファイルは、SVG (Scalable Vector Graphics) フォーマットで GitHub のロゴを表す XML ベースのベクトル画像です。SVG は、ウェブ上で使用される 2 次元のベクトル画像フォーマットです。

1. ファイルの全体的な説明:
このファイルは、GitHub のロゴである「Octocat」のシンプルな白黒画像を SVG 形式で表しています。全体の幅は 98px、高さは 96px です。

2. インポートされているモジュール:
SVG 自体はマークアップ言語なので、外部モジュールはインポートされていません。

3. 関数の説明:
SVG 自体には関数は含まれていません。ただし、`<path>` 要素には、ロゴの形状を定義する "d" 属性があり、そこに Path データ (座標と曲線を表す文字列) が記述されています。

/Users/user/WorkSpace/nike-ChatVRM/.github/workflows/nextjs.yml:
1. ファイルの全体的な説明:
このファイルは、Next.jsアプリケーションをGitHub PagesにデプロイするためのGitHub Actionsのワークフローを定義しています。プッシュがあると、アプリケーションのビルドとデプロイが自動的に実行されます。

2. インポートされているモジュール:
このファイルにはPythonやTypeScriptのコードがないため、インポートされているモジュールはありません。

3. 関数の説明:
このファイルには関数の定義がありません。代わりに、ジョブとステップが定義されています。

- build ジョブ:
  - アプリケーションのソースコードをチェックアウトする
  - Node.jsとパッケージマネージャ(npm または yarn)をセットアップする
  - 依存関係をインストールする
  - Next.jsアプリケーションをビルドする
  - 静的ファイルをエクスポートする
  - ビルド成果物をアーティファクトとしてアップロードする

- deploy ジョブ:
  - ビルド成果物をGitHub Pagesにデプロイする

このワークフローは、Next.jsアプリケーションのホスティングとデプロイを自動化するために設計されています。

/Users/user/WorkSpace/nike-ChatVRM/src/features/emoteController/expressionController.ts:
1. ファイルの全体的な説明:
このファイルは、Three.jsとVRMを使用してキャラクターの表情を管理するクラス `ExpressionController` を定義しています。主な機能は、前の表情を保持しながら次の表情を適用する、自動で視線を操作する、自動で瞬きさせるなどです。

2. インポートされているモジュール:
- `three`
- `@pixiv/three-vrm`
- `./autoLookAt`
- `./autoBlink`

3. 関数の説明:

- `constructor(vrm, camera)`: コンストラクタ。VRMインスタンスとカメラオブジェクトを受け取り、初期化を行う。
- `playEmotion(preset)`: 指定された表情プリセットを適用する。前の表情があれば初期化する。
- `lipSync(preset, value)`: 口パクの表情を適用する。重み付けされた値で表現される。
- `update(delta)`: 毎フレーム呼び出され、自動瞬きや口パクの更新を行う。

/Users/user/WorkSpace/nike-ChatVRM/src/features/emoteController/emoteConstants.ts:
1. ファイルの全体的な説明:
このファイルは、瞬きに関する定数を定義しています。具体的には、目を閉じている最大時間と目を開いている最大時間の2つの定数が定義されています。

2. インポートされているモジュール:
このファイルではモジュールがインポートされていません。

3. 関数の説明:
このファイルには関数が定義されていません。代わりに、以下の2つの定数が定義されています。

- BLINK_CLOSE_MAX: 瞬きで目を閉じている最大時間(秒)を表す定数で、値は0.12です。
- BLINK_OPEN_MAX: 瞬きで目を開いている最大時間(秒)を表す定数で、値は5です。

/Users/user/WorkSpace/nike-ChatVRM/src/features/emoteController/autoLookAt.ts:
1. ファイルの全体的な説明:
このファイルには、Three.jsライブラリとPixivによって作成されたVRMライブラリを使用して、3Dモデルの目線を制御するためのクラス `AutoLookAt` が定義されています。

2. インポートされているモジュール:
- `three`: Three.jsライブラリの全てのモジュールがインポートされています。
- `@pixiv/three-vrm`: PixivによってVRMファイルをロードするためのライブラリがインポートされています。

3. 関数の説明:
- `constructor(vrm: VRM, camera: THREE.Object3D)`: `AutoLookAt` クラスのコンストラクタです。VRMモデルとカメラオブジェクトを受け取り、目線の制御に使用する `lookAtTarget` オブジェクトを初期化します。

/Users/user/WorkSpace/nike-ChatVRM/src/features/emoteController/autoBlink.ts:
1. ファイルの全体的な説明:
このファイルは、VRMモデルの自動瞬き機能を制御するクラス `AutoBlink` を定義しています。自動瞬きをON/OFFに切り替えることができ、瞬きのタイミングと時間を管理しています。

2. インポートされているモジュール:
- `@pixiv/three-vrm` からの `VRMExpressionManager`
- `./emoteConstants` からの `BLINK_CLOSE_MAX`、`BLINK_OPEN_MAX`

3. 関数の説明:

- `constructor(expressionManager: VRMExpressionManager)`: AutoBlinkクラスのコンストラクタ。VRMExpressionManagerオブジェクトを受け取り、初期化を行います。

- `setEnable(isAuto: boolean)`: 自動瞬きをON/OFFに設定します。目が閉じている場合、目が開くまでの秒数を返します。

- `update(delta: number)`: 毎フレーム呼び出され、瞬きの状態を更新します。

- `close()`: 目を閉じる処理を行います。

- `open()`: 目を開く処理を行います。

/Users/user/WorkSpace/nike-ChatVRM/src/features/emoteController/emoteController.ts:
1. ファイルの全体的な説明:
このファイルは、VRMモデルの感情表現としてExpressionとMotionを操作するためのクラス `EmoteController` を定義しています。このクラスは、別のクラス `ExpressionController` を利用してExpressionの制御を行います。

2. インポートされているモジュール:
- `three`: 3Dグラフィックスを扱うためのライブラリ
- `@pixiv/three-vrm`: VRMモデルを扱うためのライブラリ
- `./expressionController`: 同じプロジェクト内の `expressionController` モジュール

3. 関数の説明:
- `constructor(vrm: VRM, camera: THREE.Object3D)`: `EmoteController` インスタンスを初期化します。`vrm` にはVRMモデル、`camera` にはカメラオブジェクトを渡します。
- `playEmotion(preset: VRMExpressionPresetName)`: 指定された `preset` に基づいて感情表現を行います。
- `lipSync(preset: VRMExpressionPresetName, value: number)`: 口パクの制御を行います。`preset` で表情を指定し、`value` で程度を設定します。
- `update(delta: number)`: 毎フレーム呼び出され、感情表現の更新を行います。`delta` には前回の更新からの経過時間が渡されます。

/Users/user/WorkSpace/nike-ChatVRM/src/features/lipSync/lipSyncAnalyzeResult.ts:
1. ファイルの全体的な説明:
このファイルは、TypeScriptのインターフェース定義を含んでいます。`LipSyncAnalyzeResult`というインターフェースが定義されており、音量を表す`volume`プロパティを持っています。

2. インポートされているモジュール:
このファイルにはインポートされているモジュールはありません。

3. 関数の説明:
このファイルには関数が定義されていません。ただし、`LipSyncAnalyzeResult`インターフェースが定義されています。このインターフェースは、音声解析の結果を表すオブジェクトの型を定義するために使用される可能性があります。

/Users/user/WorkSpace/nike-ChatVRM/src/features/lipSync/lipSync.ts:
1. ファイルの全体的な説明:
このファイルは、ブラウザ内でオーディオファイルの再生と音声分析を行うためのクラス `LipSync` を定義しています。`LipSync` クラスは、Web Audio API を使用してオーディオデータを処理し、音量レベルを計算します。

2. インポートされているモジュール:
- `./lipSyncAnalyzeResult`

3. 関数の説明:
- `constructor(audio: AudioContext)`: `LipSync` インスタンスを初期化します。`AudioContext` オブジェクトと `AnalyserNode` を作成し、音声データ用の Float32Array を初期化します。
- `update(): LipSyncAnalyzeResult`: オーディオデータの時間領域における振幅の最大値を計算し、0〜1の範囲に正規化した音量レベルを返します。
- `playFromArrayBuffer(buffer: ArrayBuffer, onEnded?: () => void)`: 指定された ArrayBuffer からオーディオデータをデコードし、再生を開始します。再生が終了したときにコールバック関数を実行することができます。
- `playFromURL(url: string, onEnded?: () => void)`: 指定された URL からオーディオデータを取得し、再生を開始します。再生が終了したときにコールバック関数を実行することができます。

/Users/user/WorkSpace/nike-ChatVRM/src/features/messages/speakCharacter.ts:
1. ファイルの全体的な説明:
このファイルは、様々な音声合成APIを使用して、与えられたテキストから音声を生成する機能を提供しています。また、生成された音声を再生するための関数も含まれています。

2. インポートされているモジュール:
- `@/utils/wait`: 待機時間を提供する関数が含まれているモジュール
- `./synthesizeVoice`: KoeiroMapの音声合成APIを使用する関数が含まれているモジュール
- `./synthesizeVoiceGoogle`: GoogleのTTS APIを使用する関数が含まれているモジュール
- `./synthesizeStyleBertVITS2`: StyleBertVITS2の音声合成APIを使用する関数が含まれているモジュール
- `../vrmViewer/viewer`: VRMモデルを表示するViewerクラスが含まれているモジュール
- `@/utils/englishToJapanese.json`: 英語と日本語の対応表が含まれているJSONファイル

3. 関数の説明:

- `createSpeakCharacter()`: 音声合成と再生を行う関数を返します。引数には、台本、Viewer、音声合成の設定などが含まれます。
- `convertEnglishToJapaneseReading(text: string)`: 与えられたテキストの英語の部分を、対応する日本語の読み方に変換します。
- `getGoogleTtsType(googleTtsType: string, selectLanguage: string)`: 選択された言語に基づいて、GoogleのTTS APIで使用する音声タイプを取得します。
- `getGppgleTtsType(selectLanguage: string)`: 選択された言語に基づいて、GoogleのTTS APIで使用する音声タイプを取得します。
- `fetchAudio(talk: Talk, apiKey: string)`: KoeiroMapの音声合成APIを使用して、与えられたテキストから音声を生成します。
- `fetchAudioVoiceVox(talk: Talk, speaker: string)`: VOICEVOXの音声合成APIを使用して、与えられたテキストから音声を生成します。
- `fetchAudioGoogle(talk: Talk, ttsType: string)`: GoogleのTTS APIを使用して、与えられたテキストから音声を生成します。
- `fetchAudioStyleBertVITS2(talk: Talk, stylebertvits2ServerUrl: string, stylebertvits2ModelId: string, stylebertvits2Style: string, selectLanguage: string)`: StyleBertVITS2の音声合成APIを使用して、与えられたテキストから音声を生成します。
- `testVoice(viewer: Viewer, voicevoxSpeaker: string)`: VOICEVOXの音声合成APIを使用して、テストの音声を生成し、Viewerで再生します。
- `fetchAudioVoiceGSVIApi(talk: Talk, url: string, character: string, batchsize: number, speed: number)`: GSVITTSの音声合成APIを使用して、与えられたテキストから音声を生成します。

/Users/user/WorkSpace/nike-ChatVRM/src/features/messages/messages.ts:
1. ファイルの全体的な説明:
このファイルは、VRMモデルとチャットボットの発話を連携させるためのユーティリティ関数を提供しています。テキストデータから発話スタイルと表情を抽出し、VRMモデルで再現するための機能が実装されています。

2. インポートされているモジュール:
- `@pixiv/three-vrm`からVRMExpressionとVRMExpressionPresetNameをインポート
- `../constants/koeiroParam`からKoeiroParamをインポート

3. 関数の説明:

- `splitSentence(text: string): string[]`
  - 与えられたテキストを句点や改行で分割し、空文字列を除外した配列を返します。

- `textsToScreenplay(texts: string[], koeiroParam: KoeiroParam): Screenplay[]`
  - 与えられたテキストの配列から、発話スタイル、表情、発話位置などを含むScreenplayオブジェクトの配列を生成します。
  - テキスト内の[emotion]タグから表情を抽出し、該当する発話スタイルに変換します。

- `emotionToTalkStyle(emotion: EmotionType): TalkStyle`
  - 与えられた表情の種類に対応する発話スタイルを返します。

/Users/user/WorkSpace/nike-ChatVRM/src/features/messages/synthesizeStyleBertVITS2.ts:
1. ファイルの全体的な説明:
このファイルには、StyleBertVITS2 APIを呼び出す非同期関数`synthesizeStyleBertVITS2Api`が含まれています。この関数は、与えられたテキスト、StyleBertVITS2サーバーのURL、モデルID、スタイル、言語を引数として受け取り、音声合成された音声データ(バッファ)を返します。

2. インポートされているモジュール:
このファイルではモジュールをインポートしていません。

3. 関数の説明:
- `synthesizeStyleBertVITS2Api`: 与えられたテキスト、StyleBertVITS2サーバーのURL、モデルID、スタイル、言語を使用して、StyleBertVITS2 APIに音声合成リクエストを送信し、音声データ(バッファ)を取得する非同期関数です。APIリクエストに失敗した場合は、エラーをスローします。

/Users/user/WorkSpace/nike-ChatVRM/src/features/messages/synthesizeVoiceGoogle.ts:
1. ファイルの全体的な説明:
このファイルには、Google APIを使ってテキストから音声を合成する関数が含まれています。

2. インポートされているモジュール:
このファイルではモジュールがインポートされていません。

3. 関数の説明:
synthesizeVoiceGoogleApi(message: string, ttsType: string)
- 指定されたメッセージとTTSタイプを使って、Google APIを介してテキストから音声を合成します。合成された音声データをオーディオとして返します。

/Users/user/WorkSpace/nike-ChatVRM/src/features/messages/synthesizeVoice.ts:
1. ファイルの全体的な説明:
このファイルには、音声合成機能を提供する2つの非同期関数が含まれています。1つ目の関数は `synthesizeVoice` で、指定された文字列、話者のX座標とY座標、話し方のスタイルを使って音声を合成します。2つ目の関数は `synthesizeVoiceApi` で、APIキーを使ってサーバー側で音声を合成します。

2. インポートされているモジュール:
- `@/utils/reduceTalkStyle` からの `reduceTalkStyle`
- `../koeiromap/koeiromap` からの `koeiromapV0`
- `../messages/messages` からの `TalkStyle`

3. 関数の説明:
- `synthesizeVoice`: 指定された文字列、話者のX座標とY座標、話し方のスタイルを使って音声を合成し、audio オブジェクトを返します。
- `synthesizeVoiceApi`: サーバー側でAPIキーを使って音声を合成し、audio オブジェクトを返します。無料版では話し方のスタイルが制限されます。

/Users/user/WorkSpace/nike-ChatVRM/src/features/chat/localLLMChat.ts:
1. ファイルの全体的な説明:
このファイルは、ローカルで実行されているLarge Language Model (LLM)に対してチャットメッセージを送信し、ストリームデータとして応答を取得するための機能を提供しています。

2. インポートされているモジュール:
- `axios`: HTTP通信を行うためのライブラリ
- `Message`: 別のファイルからインポートされた型で、チャットメッセージを表すデータ構造

3. 関数の説明:
- `getLocalLLMChatResponseStream(messages, localLlmUrl, model?)`: 与えられたメッセージ配列を指定されたローカルLLMのURLに送信し、ストリームデータとして応答を取得する非同期関数。モデル名を指定することも可能。

/Users/user/WorkSpace/nike-ChatVRM/src/features/chat/anthropicChat.ts:
1. ファイルの全体的な説明:
このファイルは、Anthropic社のAPIを使用してチャットレスポンスを取得するための関数を提供しています。2つの関数が定義されており、1つはレスポンスを一括で取得し、もう1つはストリーミング形式で取得します。

2. インポートされているモジュール:
`../messages/messages` からMessage型をインポートしています。

3. 関数の説明:

- `getAnthropicChatResponse`: 与えられたメッセージ、APIキー、モデル名を使って、AnthropicのAPIから一括でチャットレスポンスを取得する非同期関数です。レスポンスメッセージをオブジェクトとして返します。

- `getAnthropicChatResponseStream`: 与えられたメッセージ、APIキー、モデル名を使って、AnthropicのAPIからストリーミング形式でチャットレスポンスを取得する非同期関数です。レスポンスをReadableStreamとして返します。

/Users/user/WorkSpace/nike-ChatVRM/src/features/chat/openAiChat.ts:
1. ファイルの全体的な説明:
このファイルは、OpenAI APIを使用してチャットボットのレスポンスを取得する関数を提供しています。2つの関数が定義されており、1つはレスポンスをまとめて取得し、もう1つはストリーミングで取得します。

2. インポートされているモジュール:
- `openai` (OpenAI APIクライアントライブラリ)
- `../messages/messages` (Messageクラスをインポート)

3. 関数の説明:

- `getOpenAIChatResponse`: 与えられたメッセージ履歴、APIキー、モデル名に基づいて、OpenAIのチャットAPIからレスポンスを取得する非同期関数。レスポンスはまとめて取得される。

- `getOpenAIChatResponseStream`: 与えられたメッセージ履歴、APIキー、モデル名に基づいて、OpenAIのチャットAPIからレスポンスをストリームで取得する非同期関数。レスポンスはストリームで受信される。

/Users/user/WorkSpace/nike-ChatVRM/src/features/chat/googleChat.ts:
1. ファイルの全体的な説明:
このファイルには、Google Generative AIを使用してチャット応答を取得するための関数が含まれています。ストリーミングとノンストリーミングの両方のAPIレスポンスを処理する機能があります。

2. インポートされているモジュール:
- `@google/generative-ai`
- `../messages/messages`

3. 関数の説明:

- `getGoogleChatResponse`: 指定されたメッセージ履歴、APIキー、モデルを使用して、Google Generative AIからテキスト応答を取得します。

- `getGoogleChatResponseStream`: 指定されたメッセージ履歴、APIキー、モデルを使用して、Google Generative AIからストリームデータ応答を取得します。

- `processMessages`: メッセージ履歴からシステムメッセージとユーザー/アシスタントメッセージの履歴を抽出します。

/Users/user/WorkSpace/nike-ChatVRM/src/features/chat/groqChat.ts:
1. ファイルの全体的な説明:
このファイルには、Groq APIと対話するための2つの関数が含まれています。一つ目の関数は、Groq APIからの応答をまとめて取得し、二つ目の関数は、ストリーミングで応答を取得します。

2. インポートされているモジュール:
- "../messages/messages" からMessage型をインポートしています。

3. 関数の説明:
- getGroqChatResponse: 指定されたメッセージ、APIキー、モデルを使用して、Groq APIに送信し、応答全体を非ストリーミングで取得します。
- getGroqChatResponseStream: 指定されたメッセージ、APIキー、モデルを使用して、Groq APIに送信し、応答をストリームで取得します。ストリームデータは適切に処理され、JSON形式のメッセージに分割されます。

/Users/user/WorkSpace/nike-ChatVRM/src/features/chat/difyChat.ts:
1. ファイルの全体的な説明:
このファイルには、Dify APIを使用してチャットレスポンスをストリーミングで取得する関数が含まれています。

2. インポートされているモジュール:
- "../messages/messages" からMessage型をインポートしています。

3. 関数の説明:
- getDifyChatResponseStream(messages, apiKey, url, conversationId, setDifyConversationId)
  - 与えられたメッセージ履歴、APIキー、URL、会話IDを使用して、Dify APIからチャット応答をストリーミングで取得する非同期関数です。会話IDを更新する関数setDifyConversationIdも引数として受け取ります。

/Users/user/WorkSpace/nike-ChatVRM/src/features/chat/aiChatFactory.ts:
1. ファイルの全体的な説明:
このファイルは、様々なAIサービスからチャット応答を取得するための機能を提供しています。OpenAI、Anthropic、Google、ローカルのLLM、Groq、Difydなどの複数のAIサービスをサポートしています。

2. インポートされているモジュール:
- `@/features/messages/messages` からの `Message`
- `./openAiChat` からの `getOpenAIChatResponseStream`
- `./anthropicChat` からの `getAnthropicChatResponseStream`
- `./googleChat` からの `getGoogleChatResponseStream`
- `./localLLMChat` からの `getLocalLLMChatResponseStream`
- `./groqChat` からの `getGroqChatResponseStream`
- `./difyChat` からの `getDifyChatResponseStream`

3. 各関数の簡潔な説明:

- `getAIChatResponseStream`: 指定されたAIサービスからチャット応答のストリームを取得する非同期関数です。入力として、AIサービスの種類、メッセージの配列、AIサービスの設定オブジェクトを受け取ります。

/Users/user/WorkSpace/nike-ChatVRM/src/features/constants/systemPromptConstants.ts:
このファイルは、チャットボットの振る舞いを定義するシステムプロンプトです。ユーザーとの会話において、チャットボットがどのように応答するかを指示しています。

2. インポートされているモジュール:
インポートされているモジュールはありません。

3. 関数の説明:
このファイルには関数が含まれていません。代わりに、SYSTEM_PROMPT という定数が定義されており、その値はチャットボットの振る舞いを説明する長い文字列です。

/Users/user/WorkSpace/nike-ChatVRM/src/features/constants/koeiroParam.ts:
1. ファイルの全体的な説明:
このファイルは、TypeScriptで書かれており、音声の位置を表すパラメータを定義しています。`KoeiroParam`型は、`speakerX`と`speakerY`の2つのプロパティを持つオブジェクトを表しています。さらに、`DEFAULT_PARAM`、`PRESET_A`、`PRESET_B`、`PRESET_C`、`PRESET_D`という5つの定数が定義されており、異なる位置を表すパラメータが設定されています。

2. インポートされているモジュール:
このファイルではモジュールがインポートされていません。

3. 関数の説明:
このファイルには関数が定義されていません。代わりに、型とコンスタントが定義されています。

- `KoeiroParam`: `speakerX`と`speakerY`の2つのプロパティを持つオブジェクト型。
- `DEFAULT_PARAM`: `speakerX`が3、`speakerY`が3の`KoeiroParam`オブジェクト。
- `PRESET_A`: `speakerX`が4.5、`speakerY`が10の`KoeiroParam`オブジェクト。
- `PRESET_B`: `speakerX`が3、`speakerY`が3の`KoeiroParam`オブジェクト。
- `PRESET_C`: `speakerX`が-5.5、`speakerY`が-3の`KoeiroParam`オブジェクト。
- `PRESET_D`: `speakerX`が3.5、`speakerY`が-8の`KoeiroParam`オブジェクト。

/Users/user/WorkSpace/nike-ChatVRM/src/features/vrmViewer/viewerContext.ts:
1. ファイルの全体的な説明:
このファイルは、React アプリケーションにおいてViewerコンポーネントをコンテキストとして提供するためのものです。Viewerクラスのインスタンスを作成し、それをViewerContextとして export しています。

2. インポートされているモジュール:
- react (から createContext をインポート)
- ./viewer (から Viewer をインポート)

3. 関数の説明:
このファイルには関数は定義されていません。

/Users/user/WorkSpace/nike-ChatVRM/src/features/vrmViewer/model.ts:
1. ファイルの全体的な説明:
このファイルは、Three.jsを使用して3Dキャラクターを管理するためのクラス`Model`を定義しています。VRMモデルのロード、アニメーションの再生、リップシンクの実行、表情制御などの機能を提供しています。

2. インポートされているモジュール:
- `three`: Three.jsライブラリ
- `@pixiv/three-vrm`: VRMモデルをロードするためのプラグイン
- `three/examples/jsm/loaders/GLTFLoader`: GLTFファイルをロードするためのローダー
- `../../lib/VRMAnimation/VRMAnimation`: VRMアニメーションを扱うためのモジュール
- `@/lib/VRMLookAtSmootherLoaderPlugin/VRMLookAtSmootherLoaderPlugin`: VRMモデルの視線制御プラグイン
- `../lipSync/lipSync`: リップシンクを実行するためのモジュール
- `../emoteController/emoteController`: VRMモデルの表情制御を行うためのモジュール
- `../messages/messages`: メッセージングシステムを扱うためのモジュール

3. 関数の説明:
- `constructor(lookAtTargetParent: THREE.Object3D)`: コンストラクタ。視線の対象となる親オブジェクトと、オーディオコンテキストを初期化します。
- `loadVRM(url: string): Promise<void>`: 指定されたURLからVRMモデルをロードします。
- `unLoadVrm()`: 現在のVRMモデルをアンロードします。
- `loadAnimation(vrmAnimation: VRMAnimation): Promise<void>`: 指定されたVRMアニメーションをロードし、再生します。
- `speak(buffer: ArrayBuffer, screenplay: Screenplay)`: 指定されたオーディオバッファとシナリオに基づいてリップシンクを行います。
- `update(delta: number): void`: アニメーションの更新、リップシンクの更新、表情制御の更新を行います。

/Users/user/WorkSpace/nike-ChatVRM/src/features/vrmViewer/viewer.ts:
1. ファイルの全体的な説明:
このファイルは、Three.jsライブラリを使用して3Dモデルをレンダリングするための機能を提供しています。主な機能としては、VRMモデル(3Dアバター)をロードし、アニメーションを再生し、カメラの操作を可能にすることが挙げられます。

2. インポートされているモジュール:
- three: Three.jsライブラリの全てのモジュール
- ./model: 同じディレクトリにある独自のModel モジュール
- @/lib/VRMAnimation/loadVRMAnimation: VRMアニメーションをロードするためのモジュール
- @/utils/buildUrl: URLを構築するためのユーティリティ関数
- three/examples/jsm/controls/OrbitControls: Three.jsのカメラコントロールライブラリ

3. 関数の説明:
- loadVrm(url: string): 指定されたURLからVRMモデルをロードします。
- unloadVRM(): 現在ロードされているVRMモデルをアンロードします。
- setup(canvas: HTMLCanvasElement): 指定されたCanvasにThree.jsレンダラーを設定し、描画を開始します。
- resize(): ウィンドウサイズの変更に応じてレンダリングサイズを調整します。
- resetCamera(): VRMモデルの頭の位置を基準にカメラ位置を調整します。
- update(): アニメーションフレームを更新し、レンダリングを行います。

/Users/user/WorkSpace/nike-ChatVRM/src/features/youtube/conversationContinuityFunctions.ts:
ファイルの全体的な説明:

このファイルは、OpenAIとAnthropicの2つのAIサービスを使用して、チャットボットの応答を生成する機能を提供しています。また、会話の流れに応じて新しい話題を切り替えたり、応答の継続を判断したりする機能も含まれています。

インポートされているモジュール:

- `@/features/messages/messages`からMessage型がインポートされています。
- `@/features/chat/openAiChat`から`getOpenAIChatResponse`関数がインポートされています。
- `@/features/chat/anthropicChat`から`getAnthropicChatResponse`関数がインポートされています。

関数の説明:

1. `fetchAIResponse`: 指定されたAIサービスに応じて、OpenAIまたはAnthropicのチャット応答を取得する。

2. `getLastMessages`: 指定された数の最新メッセージを取得し、文字列として返す。

3. `getModifiedSystemMessage`: 与えられたシステムメッセージを修正して返す。

4. `getBestComment`: 会話履歴とYoutubeのコメントから、最適なコメントを選択する。

5. `getMessagesForSleep`: 休憩用のメッセージを生成する。

6. `getAnotherTopic`: 会話履歴から関連する新しい話題を取得する。

7. `getMessagesForNewTopic`: 新しい話題に切り替えるためのメッセージを生成する。

8. `checkIfResponseContinuationIsRequired`: 会話履歴から、次の発言者が同じ話者であるべきかを判断する。

9. `getMessagesForContinuation`: 会話の継続に使用するメッセージを生成する。

/Users/user/WorkSpace/nike-ChatVRM/src/features/youtube/youtubeComments.ts:
1. ファイルの全体的な説明:
このファイルは、YouTube のライブチャットからコメントを取得し、AIモデルを使ってコメントを処理する機能を提供しています。また、コメントがない場合にAIモデルから会話の続きや新しいトピックを生成する機能も含まれています。

2. インポートされているモジュール:
- "@/features/messages/messages" からの Message
- "@/features/youtube/conversationContinuityFunctions" からの以下の関数:
  - getBestComment
  - getMessagesForSleep
  - getAnotherTopic
  - getMessagesForNewTopic
  - checkIfResponseContinuationIsRequired
  - getMessagesForContinuation

3. 関数の説明:
- getLiveChatId: YouTube の動画 ID から対応するライブチャット ID を取得する。
- retrieveLiveComments: 指定されたライブチャットから最新のコメントを取得する。
- fetchAndProcessComments: ライブチャットからコメントを取得し、AIモデルを使ってコメントを処理する。コメントがない場合は、会話の続きや新しいトピックを生成する。

/Users/user/WorkSpace/nike-ChatVRM/src/features/googletts/googletts.ts:
1. ファイルの全体的な説明:
このファイルは、Google Cloud Text-to-Speech APIを利用して文字列をオーディオデータに変換する関数 `googleTts` を提供しています。関数は非同期で実行され、指定された文字列とTTS音声タイプを受け取り、オーディオデータを返します。

2. インポートされているモジュール:
- `@google-cloud/text-to-speech`

3. 関数の説明:
- `googleTts(message: string, ttsType: string)`: 指定された文字列 `message` と音声タイプ `ttsType` を使用して、Google Cloud Text-to-Speech APIを呼び出し、オーディオデータを生成します。オーディオデータは `audio` プロパティに格納され、Promise オブジェクトとして返されます。

/Users/user/WorkSpace/nike-ChatVRM/src/features/koeiromap/koeiromap.ts:
1. ファイルの全体的な説明:
このファイルには、音声合成APIである「KOEIROMAP」を利用するための2つの非同期関数が定義されています。それぞれの関数は、テキストメッセージ、話者の座標、話者の話し方のスタイルなどのパラメータを受け取り、APIに対してPOSTリクエストを送信します。APIからの応答として、合成された音声データが返されます。

2. インポートされているモジュール:
- `{ TalkStyle }` から `../messages/messages`

3. 関数の説明:

- `koeiromapV0(message, speakerX, speakerY, style)`:
  KOEIROMAP v0 APIを使用して音声合成を行う非同期関数。テキスト、話者の座標、話し方のスタイルを受け取り、合成された音声データを返します。

- `koeiromapFreeV1(message, speakerX, speakerY, style, apiKey)`:
  KOEIROMAP v1 APIを使用して音声合成を行う非同期関数。テキスト、話者の座標、話し方のスタイル、APIキーを受け取り、合成された音声データ(MP3形式)を返します。

/Users/user/WorkSpace/nike-ChatVRM/src/utils/reduceTalkStyle.ts:
1. ファイルの全体的な説明:
このファイルは、koeiromap Free v1の制限に対応した声色の型定義とその制限を行う関数を提供しています。

2. インポートされているモジュール:
このファイルではモジュールがインポートされていません。

3. 関数の説明:
reduceTalkStyle(talkStyle: string): ReducedTalkStyle
koeiromap Free v1で使用できる声色パラメータ("talk"、"happy"、"sad")のみを受け入れ、それ以外の値が渡された場合は"talk"を返す関数です。

/Users/user/WorkSpace/nike-ChatVRM/src/utils/wait.ts:
1. ファイルの全体的な説明:
このコードは、TypeScriptで書かれた単一の非同期関数 `wait` をエクスポートしています。この関数は、指定されたミリ秒数だけ待機し、その後に解決される Promise を返します。

2. インポートされているモジュール:
このファイルではモジュールがインポートされていません。

3. 関数の説明:
`wait(ms: number)`: 指定されたミリ秒数(`ms`)だけ待機し、その後に解決される Promise を返す非同期関数。

/Users/user/WorkSpace/nike-ChatVRM/src/utils/buildUrl.ts:
1. ファイルの全体的な説明:
このファイルは、Next.jsアプリケーションでGitHub Pagesにアセットを公開する際に、アセットのURLにリポジトリ名を追加する関数を提供しています。

2. インポートされているモジュール:
- next/config

3. 関数の説明:
- buildUrl(path: string): string
  - 与えられたパスにNext.jsの環境変数から取得したリポジトリのルートパスを付加したURLを生成し、返します。これにより、GitHub Pagesにアセットを正しく読み込むことができます。

/Users/user/WorkSpace/nike-ChatVRM/src/styles/globals.css:
1. ファイルの全体的な説明:
このファイルは、Tailwind CSSのスタイルを適用するためのCSSファイルです。Tailwind CSSは、ユーティリティファーストのCSSフレームワークで、小さなモジュール化されたクラスを使用してスタイルを適用します。

2. インポートされているモジュール:
このファイルではモジュールがインポートされていません。

3. 関数の説明:
このファイルには関数が定義されていません。

@tailwind base;
@tailwind components;
@tailwind utilities;
これらの行は、Tailwind CSSの基本的なスタイル、コンポーネントスタイル、ユーティリティスタイルをインポートするためのディレクティブです。

body {...}
この部分では、ボディ要素のbackground-position、background-attachment、background-size、background-repeatプロパティを設定しています。

@layer components {...}
この部分では、input-rangeクラスのスタイルを定義しています。このクラスは、カスタムのスライダー要素を作成するために使用されます。

@layer utilities {...}
この部分では、scroll-hiddenクラスのスタイルを定義しています。このクラスは、要素からスクロールバーを非表示にするために使用されます。

/Users/user/WorkSpace/nike-ChatVRM/src/components/settings.tsx:
1. ファイルの全体的な説明:
このファイルは、React コンポーネントを定義しています。コンポーネントは設定画面で、様々な設定を行うことができます。設定可能な項目には、言語設定、キャラクター名表示、VRM モデルと背景画像の選択、外部接続モード、AI サービスの選択、音声エンジンの選択、チャットログの設定などがあります。

2. インポートされているモジュール:
- React、useEffect (React の機能)
- IconButton、TextButton、GitHubLink、Link (カスタムコンポーネント)
- Message (メッセージ関連の機能)
- KoeiroParam、PRESET_A、PRESET_B、PRESET_C、PRESET_D (音声関連の定数)
- i18n、useTranslation (多言語対応の機能)
- speakers.json (音声関連のデータ)

3. 関数の説明:
- Settings: メイン関数で、設定画面全体を構成するコンポーネントです。様々な props を受け取り、レンダリングに使用しています。
- useEffect: コンポーネントがマウントされた際に、ローカルストレージから言語設定を読み込みます。

/Users/user/WorkSpace/nike-ChatVRM/src/components/chatLog.tsx:
1. ファイルの全体的な説明:
このファイルは、Reactコンポーネントを定義しています。`ChatLog`コンポーネントは、チャットメッセージのログを表示するコンポーネントで、`Chat`コンポーネントは、個々のメッセージを表示するコンポーネントです。

2. インポートされているモジュール:
- `react`から`useEffect`と`useRef`がインポートされています。
- `@/features/messages/messages`から`Message`型がインポートされています。

3. 関数の説明:
- `ChatLog`コンポーネント: 受け取ったメッセージとキャラクター名を表示するコンポーネント。メッセージが更新されるたびに、スクロール位置を調整します。
- `Chat`コンポーネント: 個々のメッセージを表示するコンポーネント。メッセージの役割(ユーザー、システム、コード)に応じて、スタイルを変更します。

/Users/user/WorkSpace/nike-ChatVRM/src/components/messageInput.tsx:
1. ファイルの全体的な説明:
このファイルは、チャットインターフェースにおけるメッセージ入力コンポーネントを定義しています。ユーザーがテキストメッセージを入力したり、マイクボタンをクリックして音声入力を行ったりできます。また、メッセージ送信ボタンとマイクボタンのアイコンも含まれています。

2. インポートされているモジュール:
- "./iconButton" からの `IconButton` コンポーネント
- "react-i18next" からの `useTranslation` フック
- React からの `useState`, `useEffect` フック

3. 関数の説明:
- `MessageInput`: メッセージ入力コンポーネントの本体。プロップスとしてメッセージ関連の状態と、各種イベントハンドラを受け取ります。
- `handleKeyPress`: テキストエリアでEnterキーが押された際の挙動を制御します。Shiftキーの有無に応じて改行や送信を行います。

このコンポーネントでは、メッセージ入力中にローディングドットのアニメーションを表示するロジックも含まれています。また、グリッドレイアウトを使ってマイクボタン、テキストエリア、送信ボタンを配置しています。

/Users/user/WorkSpace/nike-ChatVRM/src/components/link.tsx:
1. ファイルの全体的な説明:
このファイルは、Reactコンポーネントの`Link`を定義しています。`Link`コンポーネントは、新しいタブでリンクを開くための`<a>`タグを提供します。

2. インポートされているモジュール:
このファイルではモジュールをインポートしていません。

3. 関数の説明:
`Link`関数: `url`と`label`プロパティを受け取り、新しいタブで指定されたURLを開く`<a>`タグを返します。リンクのスタイルは`text-primary`と`hover:text-primary-hover`のTailwind CSSクラスで設定されています。

/Users/user/WorkSpace/nike-ChatVRM/src/components/speakers.json:
1. ファイルの全体的な説明:
このファイルはJSONフォーマットのデータを含んでいます。データは配列の形式で表現されており、各要素はオブジェクトで、"speaker"キーと"id"キーを持っています。"speaker"キーには様々な話者の名前が格納されており、"id"キーには各話者に対応する数値IDが格納されています。このデータは、おそらく音声合成システムなどで使用される話者情報を表現しているものと考えられます。

2. インポートされているモジュール:
このファイルはJSONデータのみを含んでおり、プログラミング言語のコードではないため、インポートされているモジュールはありません。

3. 関数の説明:
このファイルはデータのみを含んでおり、関数は定義されていません。

/Users/user/WorkSpace/nike-ChatVRM/src/components/meta.tsx:
1. ファイルの全体的な説明:
このファイルはNext.jsのReactコンポーネントで、WebサイトのメタデータをHead要素内に設定しています。タイトル、説明、OGイメージなどのメタデータが設定されています。

2. インポートされているモジュール:
- "@/utils/buildUrl": ファイル内で使用されていないため、説明は省略します。
- "next/head": Next.jsのHeadコンポーネントをインポートしています。

3. 関数の説明:
- Meta(): Headコンポーネントを返す関数です。メタデータ情報を設定しています。

/Users/user/WorkSpace/nike-ChatVRM/src/components/textButton.tsx:
1. ファイルの全体的な説明:
このファイルは、Reactコンポーネントの1つであるTextButtonをエクスポートしています。TextButtonは、HTMLの`<button>`要素をベースにしたカスタムボタンコンポーネントです。

2. インポートされているモジュール:
- `react` (implicitly imported)
- `ButtonHTMLAttributes` from 'react'

3. 関数の説明:
- `TextButton`
  - このコンポーネントは、プロップスとしてHTMLButtonElementの属性を受け取ります。
  - ボタンのスタイルは、className プロップスを使って設定されます。ボタンのテキストは、props.childrenから取得されます。
  - ボタンのスタイルには、プライマリカラーのグラデーション、丸みを帯びた形状、余白などが含まれています。ホバー時、アクティブ時、無効時の状態に応じて、背景色が変化します。

/Users/user/WorkSpace/nike-ChatVRM/src/components/assistantText.tsx:
1. ファイルの全体的な説明:
このファイルは、Reactコンポーネントをエクスポートしています。コンポーネント名は `AssistantText` で、プロップスとして `message`、`characterName`、`showCharacterName` を受け取ります。このコンポーネントは、受け取ったメッセージとキャラクター名を表示するためのUIを提供しています。

2. インポートされているモジュール:
このファイルではモジュールがインポートされていません。

3. 関数の説明:
- `AssistantText`: このコンポーネントは、受け取ったメッセージ、キャラクター名、およびキャラクター名の表示/非表示のフラグに基づいて、UIを構築します。メッセージにはマークダウン形式の書式設定が適用され、一定の行数を超えた場合は省略されます。キャラクター名が表示される場合は、メッセージの上部に表示されます。

/Users/user/WorkSpace/nike-ChatVRM/src/components/codeLog.tsx:
1. ファイルの全体的な説明:
このファイルは、React アプリケーションのコンポーネントを定義しています。`CodeLog` コンポーネントは、メッセージの配列を受け取り、それらを表示します。メッセージは、"code"、"output"、"executing"、"assistant"、および "human" のいずれかの役割を持つことができます。それぞれの役割に応じて、メッセージは異なる背景色とテキスト色で表示されます。

2. インポートされているモジュール:
- `react`
- `@/features/messages/messages` (Message型の定義が含まれている)

3. 関数の説明:
- `CodeLog`: 受け取ったメッセージの配列を表示するコンポーネント。メッセージがスクロールして常に最新のメッセージが表示されるようにしている。
- `Chat`: 個々のメッセージを表示するコンポーネント。メッセージの役割に応じて、背景色とテキスト色を設定する。メッセージがコードの場合は、改行で分割して複数行で表示する。

/Users/user/WorkSpace/nike-ChatVRM/src/components/menu.tsx:
1. ファイルの全体的な説明:
このファイルは、Reactコンポーネント `Menu` を定義しています。`Menu` コンポーネントは、さまざまな設定を管理し、チャットログやコードログを表示するための UI を提供します。また、音声合成や YouTube ライブストリーミングなどの機能も含まれています。

2. インポートされているモジュール:
- "./iconButton"
- "@/features/messages/messages"
- "@/features/constants/koeiroParam"
- "./chatLog"
- "./codeLog"
- "react"
- "./settings"
- "@/features/vrmViewer/viewerContext"
- "./assistantText"
- "react-i18next"
- "@/features/messages/speakCharacter"

3. 関数の説明:
- `handleChangeAIService`: AIサービスの選択を変更するためのコールバック関数。
- `handleChangeSystemPrompt`: システムプロンプトの変更を処理するコールバック関数。
- `handleOpenAiKeyChange`: OpenAI API キーの変更を処理するコールバック関数。
- `handleAnthropicKeyChange`: Anthropic API キーの変更を処理するコールバック関数。
- `handleGoogleKeyChange`: Google API キーの変更を処理するコールバック関数。
- `handleGroqKeyChange`: Groq API キーの変更を処理するコールバック関数。
- `handleChangeLocalLlmUrl`: ローカル LLM URL の変更を処理するコールバック関数。
- `handleDifyKeyChange`: Dify API キーの変更を処理するコールバック関数。
- `handleDifyUrlChange`: Dify URL の変更を処理するコールバック関数。
- `handleDifyConversationIdChange`: Dify 会話 ID の変更を処理するコールバック関数。
- `handleChangeKoeiromapKey`: Koeiromap API キーの変更を処理するコールバック関数。
- `handleVoicevoxSpeakerChange`: VoiceVox スピーカーの変更を処理するコールバック関数。
- `handleChangeGoogleTtsType`: Google TTS の種類の変更を処理するコールバック関数。
- `handleChangeStyleBertVits2ServerUrl`: StyleBertVits2 サーバーの URL の変更を処理するコールバック関数。
- `handleChangeStyleBertVits2ModelId`: StyleBertVits2 モデル ID の変更を処理するコールバック関数。
- `handleChangeStyleBertVits2Style`: StyleBertVits2 スタイルの変更を処理するコールバック関数。
- `handleYoutubeApiKeyChange`: YouTube API キーの変更を処理するコールバック関数。
- `handleYoutubeLiveIdChange`: YouTube ライブ ID の変更を処理するコールバック関数。
- `handleChangeKoeiroParam`: Koeiromap パラメータの変更を処理するコールバック関数。
- `handleWebSocketMode`: WebSocket モードの変更を処理するコールバック関数。
- `handleConversationContinuityMode`: 会話の継続モードの変更を処理するコールバック関数。
- `handleClickOpenVrmFile`: VRM ファイルを開くためのコールバック関数。
- `handleClickOpenBgFile`: 背景画像ファイルを開くためのコールバック関数。
- `handleClickTestVoice`: 音声のテストを行うためのコールバック関数。
- `handleChangeVrmFile`:

/Users/user/WorkSpace/nike-ChatVRM/src/components/messageInputContainer.tsx:
1. ファイルの全体的な説明:
このファイルは、テキスト入力と音声入力を提供するReactコンポーネントです。音声認識の結果は自動的に送信され、返答文の生成中は入力を無効化します。

2. インポートされているモジュール:
- `@/components/messageInput` からの `MessageInput` コンポーネント
- `react` から `useState`、`useEffect`、`useCallback` フック

3. 関数の説明:

- `handleRecognitionResult`: 音声認識の結果を処理する関数。認識されたテキストをuserMessageステートに設定し、発言終了時にonChatProcessStartを呼び出します。

- `handleRecognitionEnd`: 発言が終了したときに呼び出される関数。isMicRecordingをfalseに設定します。

- `handleClickMicButton`: マイクボタンがクリックされたときの処理を行う関数。isMicRecordingの状態に応じて、音声認識を開始または中止します。

- `handleClickSendButton`: 送信ボタンがクリックされたときの処理を行う関数。onChatProcessStartを呼び出し、userMessageを引数として渡します。

- `MessageInputContainer`: メインコンポーネント。音声認識の設定、ユーザー入力の状態管理、イベントハンドラの定義を行います。MessageInputコンポーネントをレンダリングします。

/Users/user/WorkSpace/nike-ChatVRM/src/components/iconButton.tsx:
1. ファイルの全体的な説明:
このファイルは、Reactコンポーネントである`IconButton`をエクスポートしています。`IconButton`は、アイコンと任意のラベルを持つボタンを提供します。ボタンの外観は、CSSクラスを介して適用されます。ボタンの状態 (処理中など) に応じて、異なるアイコンが表示されます。

2. インポートされているモジュール:
- `@charcoal-ui/icons` からの `KnownIconType`
- `react` からの `ButtonHTMLAttributes`

3. 関数の説明:
- `IconButton`: アイコンとラベル付きのボタンを描画するReactコンポーネント。渡された props に基づいて、適切なアイコンとスタイルを適用します。

/Users/user/WorkSpace/nike-ChatVRM/src/components/githubLink.tsx:
1. ファイルの全体的な説明:
このファイルは、Next.jsのReactコンポーネントを定義しています。`GitHubLink`コンポーネントは、GitHubリポジトリへのリンクを表示するための機能を提供しています。

2. インポートされているモジュール:
- `next/image`: Next.jsの画像コンポーネントをインポートしています。
- `@/utils/buildUrl`: カスタムユーティリティ関数`buildUrl`をインポートしています。

3. 関数の説明:
- `GitHubLink`: このコンポーネントは、GitHubリポジトリへのリンクを表示するための要素を返します。リンクには、GitHubのロゴと「Fork me」というテキストが含まれています。スタイリングは、Tailwind CSSを使用して適用されています。

/Users/user/WorkSpace/nike-ChatVRM/src/components/introduction.tsx:
1. ファイルの全体的な説明:
このファイルは、React アプリケーションの一部で、Introduction コンポーネントを定義しています。このコンポーネントは、アプリケーションの紹介ダイアログを表示し、言語の選択や表示/非表示の設定を行うことができます。

2. インポートされているモジュール:
- react: React フレームワークからの主要な機能をインポートしています。
- ./link: カスタムの Link コンポーネントをインポートしています。
- ./iconButton: カスタムの IconButton コンポーネントをインポートしています。
- i18next: i18next 国際化ライブラリをインポートしています。
- react-i18next: react-i18next 国際化ライブラリの React 用ラッパーをインポートしています。

3. 関数の説明:

- Introduction: メインのコンポーネントで、紹介ダイアログの表示と言語設定を処理します。
- handleDontShowIntroductionChange: 紹介ダイアログを次回から表示するかどうかの設定を変更するコールバック関数です。
- updateLanguage: 選択された言語に基づいて、アプリケーションの表示言語とボイス言語を更新する関数です。
- getVoiceLanguageCode: 選択された言語コードに対応するボイス言語コードを取得する関数です。

/Users/user/WorkSpace/nike-ChatVRM/src/components/vrmViewer.tsx:
1. ファイルの全体的な説明:
このファイルは、React コンポーネントとして実装された VRM ビューアーです。VRM (Virual Reality Model) は 3D キャラクターデータのフォーマットで、このコンポーネントではキャンバス上に VRM モデルを読み込んで表示します。ドラッグ&ドロップによる VRM ファイルの差し替えにも対応しています。

2. インポートされているモジュール:
- react: ReactのフックであるuseContextとuseCallbackをインポートしています。
- ../features/vrmViewer/viewerContext: ViewerContext を含むモジュールをインポートしています。
- @/utils/buildUrl: buildUrl関数を含むユーティリティモジュールをインポートしています。

3. 関数の説明:

- VrmViewer: メインのReactコンポーネント関数です。キャンバスを描画し、VRMモデルの読み込みとドラッグ&ドロップによるモデル差し替えを処理します。

- canvasRef: キャンバス要素の参照を受け取るコールバック関数です。キャンバスの初期化、VRMモデルの読み込み、ドラッグ&ドロップイベントリスナーの設定を行います。

/Users/user/WorkSpace/nike-ChatVRM/src/lib/i18n.js:
1. ファイルの全体的な説明:
このファイルは、i18nextライブラリとreact-i18nextライブラリを使用して、React アプリケーション内での多言語対応を設定しています。様々な言語の翻訳ファイル(JSON形式)をリソースとして読み込み、デフォルトの言語と代替の言語を指定しています。

2. インポートされているモジュール:
- i18next: 多言語対応のためのライブラリ
- react-i18next: Reactアプリケーションで i18next を使用するためのラッパー

3. 関数の説明:
このファイルには関数は含まれていません。i18next の初期化設定とリソースの読み込みが行われています。

/Users/user/WorkSpace/nike-ChatVRM/src/lib/VRMAnimation/VRMAnimation.ts:
1. ファイルの全体的な説明:
このファイルは、VRMモデルのアニメーションを作成するためのクラス `VRMAnimation` を定義しています。このクラスは、ヒューマノイドボーンの位置と回転、表情の値、視線の位置を表すキーフレームトラックを保持し、それらを使ってThree.jsの `AnimationClip` オブジェクトを生成できます。

2. インポートされているモジュール:
- `three`: Three.jsライブラリ
- `@pixiv/three-vrm`: VRMモデルを扱うためのライブラリ

3. 関数の説明:

- `createAnimationClip(vrm: VRM)`: VRMオブジェクトから `AnimationClip` を作成します。ヒューマノイドのトラック、表情のトラック、視線のトラックを含みます。

- `createHumanoidTracks(vrm: VRM)`: VRMのヒューマノイドボーンの位置と回転のキーフレームトラックを作成します。

- `createExpressionTracks(expressionManager: VRMExpressionManager)`: VRMの表情のキーフレームトラックを作成します。

- `createLookAtTrack(trackName: string)`: VRMの視線の位置のキーフレームトラックを作成します。

/Users/user/WorkSpace/nike-ChatVRM/src/lib/VRMAnimation/VRMAnimationLoaderPluginOptions.ts:
1. ファイルの全体的な説明:
このファイルは、TypeScriptで書かれたインターフェースの定義を含んでいます。具体的には、`VRMAnimationLoaderPluginOptions` というインターフェースが定義されています。

2. インポートされているモジュール:
このファイルには、インポートされているモジュールはありません。

3. 関数の説明:
このファイルには関数の定義はありません。ただし、`VRMAnimationLoaderPluginOptions` インターフェースが定義されています。インターフェースは、オブジェクトの構造を定義するために使用されます。しかし、このファイルには具体的なプロパティの定義が含まれていないため、インターフェースの詳細な説明はできません。

/Users/user/WorkSpace/nike-ChatVRM/src/lib/VRMAnimation/VRMAnimationLoaderPlugin.ts:
1. ファイルの全体的な説明:
このファイルは、Three.jsのGLTFローダーにプラグインを提供するためのコードです。VRMCVRMAnimationという拡張機能を処理し、VRMアニメーションデータを解析して、Three.jsのAnimationClipオブジェクトに変換します。

2. インポートされているモジュール:
- three
- three/examples/jsm/loaders/GLTFLoader
- ./VRMAnimationLoaderPluginOptions
- @gltf-transform/core
- ./VRMCVRMAnimation
- @pixiv/three-vrm
- ./VRMAnimation
- ./utils/arrayChunk

3. 関数の説明:

- constructor(parser, options): VRMAnimationLoaderPluginクラスのコンストラクタ。GLTFParserとオプションを受け取ります。

- afterRoot(gltf): GLTFオブジェクトを受け取り、VRMアニメーションデータを解析してVRMAnimationオブジェクトを生成します。

- _createNodeMap(defExtension): VRMCVRMAnimationオブジェクトから、ノードインデックスとボーン名・表情名のマップを作成します。

- _createBoneWorldMatrixMap(gltf, defExtension): ボーンのワールド変換行列を計算し、マップを作成します。

- _parseAnimation(animationClip, defAnimation, nodeMap, worldMatrixMap): 単一のアニメーションクリップを解析し、VRMAnimationオブジェクトに変換します。

/Users/user/WorkSpace/nike-ChatVRM/src/lib/VRMAnimation/loadVRMAnimation.ts:
1. ファイルの全体的な説明:
このファイルは、Three.jsライブラリを使用してVRMアニメーションをロードするためのユーティリティ機能を提供しています。VRMアニメーションは3Dモデルのアニメーションデータで、GLTFフォーマットで表現されています。

2. インポートされているモジュール:
- `three/examples/jsm/loaders/GLTFLoader`: Three.jsの公式GLTFローダーモジュール
- `./VRMAnimation`: VRMアニメーションデータを表すカスタムモジュール
- `./VRMAnimationLoaderPlugin`: GLTFローダーにVRMアニメーションのロード機能を追加するプラグイン

3. 関数の説明:
- `loadVRMAnimation(url: string)`: 指定されたURLからVRMアニメーションデータをロードし、`VRMAnimation`オブジェクトを返します。URLが無効な場合は`null`を返します。

/Users/user/WorkSpace/nike-ChatVRM/src/lib/VRMAnimation/VRMCVRMAnimation.ts:
1. ファイルの全体的な説明:
このファイルは、VRMCVRMAnimationインターフェースを定義しています。このインターフェースは、VRMアニメーションデータの構造を表しています。

2. インポートされているモジュール:
- `@pixiv/three-vrm`からの`VRMExpressionPresetName`と`VRMHumanBoneName`が

3. 関数の説明:
このファイルには関数は定義されていません。代わりに、以下のインターフェースが定義されています。

- `VRMCVRMAnimation`: VRMアニメーションデータの構造を定義するインターフェース。
  - `specVersion`: アニメーションデータの仕様バージョンを表す文字列。
  - `humanoid.humanBones`: 人体のボーンの情報を含むオブジェクト。
  - `expressions`: 表情の情報を含むオブジェクト。プリセット表情とカスタム表情の情報が含まれる。
  - `lookAt`: 視線の情報を含むオブジェクト。

/Users/user/WorkSpace/nike-ChatVRM/src/lib/VRMAnimation/utils/linearstep.ts:
1. ファイルの全体的な説明:
このファイルは、TypeScriptで記述されています。`linearstep`関数をエクスポートしており、この関数は2つの数値と割合を受け取り、その割合に基づいて2つの数値の間の値を計算します。

2. インポートされているモジュール:
- `./saturate`からの`saturate`関数

3. 関数の説明:
- `linearstep(a: number, b: number, t: number)`: 与えられた2つの数値`a`と`b`、および割合`t`を受け取り、`a`と`b`の間の値を計算します。計算された値は、`saturate`関数を使用して0と1の間に制限されます。

/Users/user/WorkSpace/nike-ChatVRM/src/lib/VRMAnimation/utils/saturate.ts:
1. ファイルの全体的な説明:
このファイルには、1つの関数 `saturate` が定義されています。この関数は、与えられた数値を0.0と1.0の間に制限する目的があります。

2. インポートされているモジュール:
このファイルではモジュールがインポートされていません。

3. 関数の説明:
`saturate(x: number)`: 与えられた数値 `x` を0.0から1.0の範囲に制限します。`x` が0.0より小さい場合は0.0を、1.0より大きい場合は1.0を返します。それ以外の場合は `x` をそのまま返します。

/Users/user/WorkSpace/nike-ChatVRM/src/lib/VRMAnimation/utils/arrayChunk.ts:
1. ファイルの全体的な説明:
このファイルには、配列を指定された要素数ごとに分割するユーティリティ関数が含まれています。

2. インポートされているモジュール:
このファイルではモジュールがインポートされていません。

3. 関数の説明:
arrayChunk<T>(array: ArrayLike<T>, every: number): T[][]
この関数は、渡された配列arrayをevery個ごとにチャンクに分割した新しい配列を返します。

/Users/user/WorkSpace/nike-ChatVRM/src/lib/VRMLookAtSmootherLoaderPlugin/VRMLookAtSmoother.ts:
1. ファイルの全体的な説明:
このファイルは、Three.js の VRM (Virtual Reality Model) ライブラリに対して、キャラクターの視線追従機能を拡張するクラスを提供しています。具体的には、ユーザーの方向へスムーズに視線を向けさせたり、頭の回転も視線に合わせて動かしたり、さらに眼球のサッケード運動を再現する機能を追加しています。

2. インポートされているモジュール:
- `@pixiv/three-vrm` から `VRMHumanoid`、`VRMLookAt`、`VRMLookAtApplier` をインポートしています。
- `three` からすべてのモジュールをインポートしています。

3. 関数の説明:

- `VRMLookAtSmoother` クラス: `VRMLookAt` クラスを拡張し、視線追従機能を強化しています。
  - `update` メソッド: デルタ時間を受け取り、キャラクターの視線方向と頭の回転を更新します。ユーザー方向への視線、アニメーションによる視線、サッケード運動を考慮して計算しています。
  - `revertFirstPersonBoneQuat` メソッド: レンダリング後に呼び出され、頭の回転を元に戻します。

/Users/user/WorkSpace/nike-ChatVRM/src/lib/VRMLookAtSmootherLoaderPlugin/VRMLookAtSmootherLoaderPlugin.ts:
1. ファイルの全体的な説明:
このファイルは、Three.jsのVRMLookAtLoaderPluginを拡張し、VRMLookAtSmootherクラスを使用してキャラクターの視線を滑らかに移動させる機能を提供しています。

2. インポートされているモジュール:
- `@pixiv/three-vrm`からVRMHumanoid、VRMLookAt、VRMLookAtLoaderPluginをインポートしています。
- `three/examples/jsm/loaders/GLTFLoader`からGLTFをインポートしています。
- `./VRMLookAtSmoother`からVRMLookAtSmootherをインポートしています。

3. 関数の説明:
- `get name()`: VRMLookAtSmootherLoaderPluginの名前を返します。
- `afterRoot(gltf: GLTF)`: GLTFオブジェクトがロードされた後に実行され、VRMHumanoidとVRMLookAtオブジェクトが存在する場合、VRMLookAtSmootherインスタンスを作成し、GLTFオブジェクトのuserDataに割り当てます。これにより、キャラクターの視線がスムーズに移動するようになります。

/Users/user/WorkSpace/nike-ChatVRM/src/pages/index.tsx:
1. ファイルの全体的な説明:
このファイルは、VRMモデルを表示し、チャットインターフェースを提供するReactアプリケーションのエントリポイントです。ユーザーは様々なオプションを設定でき、チャット履歴やプロンプトをローカルストレージに保存できます。YouTube Liveのコメントを取得してAIアシスタントに送信する機能も備えています。

2. インポートされているモジュール:
- react, react-hooks
- VrmViewer: VRMモデルを表示するコンポーネント
- ViewerContext: VRMモデルの状態を管理するコンテキスト
- messages, speakCharacter: チャット履歴の管理と音声合成に関する機能
- その他のコンポーネント
- i18n, react-i18next: 多言語対応
- fetchAndProcessComments: YouTubeコメントの取得と処理
- buildUrl: URLの構築

3. 関数の説明:

- Home: メインコンポーネント。状態と各種設定を管理し、子コンポーネントをレンダリングする。
- incrementChatProcessingCount, decrementChatProcessingCount: チャット処理中のカウンターを増減させる。
- handleSpeakAi: 音声合成と再生を行う。
- processAIResponse: AIからの応答を処理する。
- preProcessAIResponse: processAIResponseをラップした関数。
- handleSendChat: ユーザーのチャット入力を処理し、AIに送信する。
- fetchAndProcessCommentsCallback: YouTubeコメントを取得し、処理する。

/Users/user/WorkSpace/nike-ChatVRM/src/pages/_document.tsx:
1. ファイルの全体的な説明:
このファイルは Next.js アプリケーションのカスタム Document コンポーネントを定義しています。Document コンポーネントは HTML ドキュメントの構造を決定するために使用されます。

2. インポートされているモジュール:
- next/document からの Html, Head, Main, NextScript

3. 関数の説明:
- Document(): このファイルで唯一の関数で、HTML ドキュメントの構造を定義しています。Google Fonts から 2 種類のフォントをインポートし、<body> 内に Main コンポーネントと NextScript コンポーネントを配置しています。

/Users/user/WorkSpace/nike-ChatVRM/src/pages/_app.tsx:
1. ファイルの全体的な説明:
このファイルは、Next.jsアプリケーションのエントリーポイントであるカスタムの `App` コンポーネントを定義しています。アプリケーションのグローバルな設定やレンダリングの処理を行っています。

2. インポートされているモジュール:
- "@/styles/globals.css" - グローバルなCSSスタイルシート
- "next/app" - Next.jsアプリケーションのコアモジュール
- "@charcoal-ui/icons" - charcoal-uiアイコンライブラリ
- "react" - Reactコアライブラリ
- "../lib/i18n" - カスタムの国際化(i18n)モジュール

3. 関数の説明:
- `App` - Next.jsアプリケーションのルートコンポーネント。ユーザーの言語設定を検出し、i18nライブラリで適切な言語を設定します。

- `useEffect` - Reactの効果フックを使用し、コンポーネントがマウントされた際に実行される関数です。ローカルストレージからユーザーの言語設定を読み取り、i18nライブラリの言語を設定します。設定がない場合はブラウザの言語設定を使用します。

/Users/user/WorkSpace/nike-ChatVRM/src/pages/api/anthropic.ts:
1. ファイルの全体的な説明:
このファイルは、Next.jsのAPIルートハンドラーで、Anthropic AIのSDKを使用して、チャットメッセージを生成するためのロジックが含まれています。ハンドラーは、クライアントから受け取ったメッセージ履歴と設定に基づいて、Anthropic APIを呼び出し、生成された応答をストリーミングまたは一括で返します。

2. インポートされているモジュール:
- `next`: Next.jsのAPIルートハンドラーに必要なモジュール
- `@anthropic-ai/sdk`: Anthropic AIのSDKモジュール
- `@/features/messages/messages`: カスタムの`Message`型が定義されているモジュール

3. 関数の説明:
- `handler`: Next.jsのAPIルートハンドラー関数で、クライアントからのリクエストを処理します。メッセージ履歴と設定を受け取り、Anthropic APIを呼び出して生成された応答をストリーミングまたは一括で返します。

/Users/user/WorkSpace/nike-ChatVRM/src/pages/api/chat.ts:
1. ファイルの全体的な説明:
このファイルは、Next.js の API ルートハンドラーで、OpenAI の API を使用してチャットボットの応答を生成しています。クライアントからのリクエストに基づいて、OpenAI の GPT-3.5-turbo モデルを使用して自然言語処理を行い、生成された応答をクライアントに返します。

2. インポートされているモジュール:
- `Configuration`と`OpenAIApi` は OpenAI の公式 Node.js ライブラリからインポートされています。
- `NextApiRequest`と`NextApiResponse` は Next.js の型定義ファイルからインポートされています。

3. 関数の説明:
- `handler` 関数: API ルートのハンドラー関数で、クライアントからのリクエストを処理し、OpenAI の API を呼び出して応答を生成し、クライアントにレスポンスを返します。

/Users/user/WorkSpace/nike-ChatVRM/src/pages/api/groq.ts:
1. ファイルの全体的な説明:
このファイルは、Next.jsのAPIルートハンドラーとして機能しています。GPTのようなモデルを使用して、与えられたメッセージに基づいて応答を生成します。ストリーミングモードと非ストリーミングモードの両方をサポートしています。

2. インポートされているモジュール:
- `NextApiRequest`、`NextApiResponse` (Next.jsの型定義)
- `Groq` (Groq SDKクライアント)
- `Message` (カスタム型定義)

3. 関数の説明:

- `handler(req, res)`: APIルートハンドラー。メッセージ、APIキー、モデル、ストリーミングモードの設定を受け取り、GPTモデルを使用して応答を生成します。ストリーミングモードの場合は、応答をストリームとして返します。非ストリーミングモードの場合は、完全な応答をJSONとして返します。

/Users/user/WorkSpace/nike-ChatVRM/src/pages/api/tts.ts:
1. ファイルの全体的な説明:
このファイルは、Next.js APIルートハンドラーとして機能し、クライアントからのリクエストを処理して、音声合成された音声データを返します。koeiromapとGoogle Text-to-Speechの2つの音声合成サービスをサポートしています。

2. インポートされているモジュール:
- `@/features/koeiromap/koeiromap` からの `koeiromapFreeV1`
- `@/features/googletts/googletts` からの `googleTts`

3. 関数の説明:
- `handler`: APIルートハンドラー関数です。クライアントからのリクエストボディを解析し、指定された音声合成サービスと設定に基づいて音声データを生成し、レスポンスとして返します。

/Users/user/WorkSpace/nike-ChatVRM/src/pages/api/stylebertvits2.ts:
1. ファイルの全体的な説明:
このファイルは、Next.jsのAPIルートハンドラーとして機能し、音声合成サービスに接続して音声データを取得し、レスポンスとして返すことを目的としています。

2. インポートされているモジュール:
- `type { NextApiRequest, NextApiResponse } from "next"`

3. 関数の説明:
- `handler(req: NextApiRequest, res: NextApiResponse<Data>)`: この関数は、音声合成リクエストを処理し、生成された音声データをレスポンスとして返します。リクエストボディから必要なパラメータを取得し、外部の音声合成サービスに接続してデータを取得します。成功時にはレスポンスとして音声データを返し、エラー時にはエラーメッセージを返します。
